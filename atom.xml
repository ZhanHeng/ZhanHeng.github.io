<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ranger]]></title>
  <link href="http://zhanheng.github.io/atom.xml" rel="self"/>
  <link href="http://zhanheng.github.io/"/>
  <updated>2016-06-15T11:34:49+08:00</updated>
  <id>http://zhanheng.github.io/</id>
  <author>
    <name><![CDATA[Zhan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[页面置换算法FIFO和LRU的JAVA实现]]></title>
    <link href="http://zhanheng.github.io/blog/2016/06/14/fifoandlru/"/>
    <updated>2016-06-14T14:39:53+08:00</updated>
    <id>http://zhanheng.github.io/blog/2016/06/14/fifoandlru</id>
    <content type="html"><![CDATA[<h3>1.先看最简单的FIFO算法，获取未命中次数：</h3>

<figure class='code'><figcaption><span>FIFO 模拟实现Java </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import java.util.*;
</span><span class='line'>
</span><span class='line'>  public class FIFO {
</span><span class='line'>
</span><span class='line'>  /**
</span><span class='line'>   *  FIFO算法
</span><span class='line'>   */
</span><span class='line'>  private static final int PRO_MEMORY = 3;            //系统分配的内存块数
</span><span class='line'>  private static int[] pages = new int[PRO_MEMORY];   //用数组模拟内存块
</span><span class='line'>  public static void main(String[] args){
</span><span class='line'>      System.out.println("--------FIFO算法------------");
</span><span class='line'>      int[] arr ={1 ,2 ,3 ,4 ,5 ,1 ,2 ,5 ,1 ,2 ,3 ,4 ,5};
</span><span class='line'>      System.out.println(getMissTimes(PRO_MEMORY, arr));
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  //查找内存中是否有该页面
</span><span class='line'>  public static boolean search(int pageId){
</span><span class='line'>       for(int i=0;i&lt;pages.length;i++){  
</span><span class='line'>              if(pages[i] == pageId){  
</span><span class='line'>                  return true;  
</span><span class='line'>              }  
</span><span class='line'>          }  
</span><span class='line'>          return false;  
</span><span class='line'>  }
</span><span class='line'>  //显示当前内存页
</span><span class='line'>  public static void display(){
</span><span class='line'>      System.out.print("当前内存中的页数为:");
</span><span class='line'>       for(int i=0;i&lt;pages.length;i++)
</span><span class='line'>           System.out.print(pages[i]+" "); 
</span><span class='line'>       System.out.println();
</span><span class='line'>  }
</span><span class='line'>  //获取缺页次数
</span><span class='line'>  public static int getMissTimes(int maxcache ,int[] cache){
</span><span class='line'>      int countOldPoint = 0;  //纪录最久的页面下标
</span><span class='line'>      int count = 0 ;         //纪录当前在使用的总页面数  
</span><span class='line'>      int lackTime = 0 ;      //缺页次数
</span><span class='line'>      //列表置入替换
</span><span class='line'>      for(int i = 0 ; i&lt;cache.length ; i++){
</span><span class='line'>          countOldPoint = countOldPoint % maxcache;
</span><span class='line'>          int inPageId = cache[i];
</span><span class='line'>          //查找内存中是否有该页面
</span><span class='line'>          if(search(inPageId)){   //命中了，不做任何操作
</span><span class='line'>              System.out.print("页号"+inPageId+"命中！");
</span><span class='line'>          }
</span><span class='line'>          else if(count&lt;maxcache){//有空闲内存页
</span><span class='line'>              pages[count] = inPageId;
</span><span class='line'>              count ++;
</span><span class='line'>              lackTime ++;
</span><span class='line'>          }
</span><span class='line'>          else{                   //没命中，则替换
</span><span class='line'>              int outPageId = pages[countOldPoint];
</span><span class='line'>              pages[countOldPoint] = inPageId;
</span><span class='line'>              System.out.print("页号"+inPageId+" 正在放入内存 , 页号 "+outPageId+"被替换出去  ，");
</span><span class='line'>              lackTime ++;
</span><span class='line'>              countOldPoint ++;
</span><span class='line'>          }
</span><span class='line'>          display();
</span><span class='line'>      }
</span><span class='line'>      return lackTime;
</span><span class='line'>  }
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h3>2.最近最久未使用(LRU)算法，获取未命中次数</h3>

<figure class='code'><figcaption><span>LRU 模拟实现Java </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import java.util.*;
</span><span class='line'>  public class LRU {
</span><span class='line'>  /**
</span><span class='line'>  *  LRU算法
</span><span class='line'>  */
</span><span class='line'>  private static Queue&lt;Integer> queue = new LinkedList&lt;Integer>(); //用队列模拟
</span><span class='line'>  public static void main(String[] args) {
</span><span class='line'>      System.out.println("-------LRU算法------------");
</span><span class='line'>      int[] arr ={1 ,2 ,3 ,4 ,5 ,1 ,2 ,5 ,1 ,2 ,3 ,4 ,5};
</span><span class='line'>      System.out.println(getLRUMissTimes(3,  arr));
</span><span class='line'>  }
</span><span class='line'>  //查找内存中是否有该页面
</span><span class='line'>  public static boolean search(int pageId){
</span><span class='line'>          Iterator&lt;Integer> iter = queue.iterator();
</span><span class='line'>          while (iter.hasNext()) {
</span><span class='line'>              Integer temp = (Integer) iter.next();
</span><span class='line'>              if (temp==pageId) {
</span><span class='line'>                  return true;
</span><span class='line'>              }
</span><span class='line'>          }
</span><span class='line'>          return false;
</span><span class='line'>  }
</span><span class='line'>  //将命中元素更新到 队列末尾
</span><span class='line'>  public static void update(int pageId){ 
</span><span class='line'>      Iterator&lt;Integer> iter = queue.iterator();
</span><span class='line'>      int res = 0;
</span><span class='line'>      while (iter.hasNext()) {
</span><span class='line'>          Integer temp = (Integer) iter.next();
</span><span class='line'>          if (temp==pageId) {
</span><span class='line'>              res = temp;
</span><span class='line'>              iter.remove(); // 移除这个元素,然后添加到队列的末端
</span><span class='line'>              break;
</span><span class='line'>          }
</span><span class='line'>      }
</span><span class='line'>      queue.offer(res);
</span><span class='line'>  }
</span><span class='line'>  //显示当前内存页
</span><span class='line'>  public static void display(){
</span><span class='line'>      System.out.print("当前内存中的页数为:");
</span><span class='line'>      Iterator&lt;Integer> iter = queue.iterator();
</span><span class='line'>      while (iter.hasNext()) {
</span><span class='line'>          Integer integer = (Integer) iter.next();
</span><span class='line'>          System.out.print(integer+" ");
</span><span class='line'>      }
</span><span class='line'>      System.out.println();
</span><span class='line'>  }
</span><span class='line'>  //获取未命中次数
</span><span class='line'>  public static int getLRUMissTimes(int maxcache ,int[] cache){
</span><span class='line'>      int count = 0 ;         //纪录当前在使用的总页面数  
</span><span class='line'>      int lackTime = 0 ;      //缺页次数
</span><span class='line'>      for (int i = 0; i &lt; cache.length; i++) {
</span><span class='line'>          int pageid = cache[i];
</span><span class='line'>          if(search(pageid)){ // 命中之后，将命中元素调整到队列末尾
</span><span class='line'>              System.out.print("页号"+pageid+" 命中！");
</span><span class='line'>              update(pageid);
</span><span class='line'>          }else if(count&lt;maxcache){ //有空闲块加入内存
</span><span class='line'>              queue.offer(pageid);
</span><span class='line'>              System.out.print("页号"+pageid+" 正在放入内存  ，");
</span><span class='line'>              count++;
</span><span class='line'>              lackTime++;
</span><span class='line'>          }else{  //没命中,淘汰队列头元素，加入新元素
</span><span class='line'>              System.out.print("页号"+pageid+" 正在放入内存 , 页号 "+queue.peek()+"被替换出去  ，");
</span><span class='line'>              queue.poll();
</span><span class='line'>              queue.offer(pageid);
</span><span class='line'>              lackTime++;
</span><span class='line'>          }
</span><span class='line'>          display();
</span><span class='line'>      }
</span><span class='line'>      return lackTime;
</span><span class='line'>  }   
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[异或的神奇]]></title>
    <link href="http://zhanheng.github.io/blog/2016/06/14/xor/"/>
    <updated>2016-06-14T10:39:53+08:00</updated>
    <id>http://zhanheng.github.io/blog/2016/06/14/xor</id>
    <content type="html"><![CDATA[<p><img src="https://www.lijinma.com/images/post/xor.png" alt="image" /></p>

<h2>什么是异或</h2>

<p><strong>在逻辑学中，逻辑算符异或</strong><code>exclusive or</code><strong>是对两个运算元的一种逻辑析取类型，符号为 XOR 或 EOR 或 ⊕（编程语言中常用</strong><code>^</code><strong>）。但与一般的逻辑或不同，异或算符的值为真仅当两个运算元中恰有一个的值为真，而另外一个的值为非真。转化为命题，就是：“两者的值不同。”或“有且仅有一个为真。</strong></p>

<h3>异或的特性</h3>

<pre><code>* 恒等率：    `X^0 = X`  
* 归零率：    `X^X = 0`
* 交换律：    `X^Y=Y^X`
* 结合率：    `X^(Y^Z)=(X^Y)^Z`
</code></pre>

<h2>异或有什么神奇之处（应用）？</h2>

<h3>（1）快速比较两个值</h3>

<p>先让我们来一个简单的问题；判断两个int数字a，b是否相等，你肯定会想到判断<code>a - b == 0</code>，但是如果判断<code>a ^ b == 0</code>效率将会更高</p>

<h3>（2）在汇编语言中经常用于将变量置零：xor a,a；</h3>

<h3>（3）我们可以使用异或来使某些特定的位翻转，因为不管是0或者是1与1做异或将得到原值的相反值；</h3>

<p>例如：翻转<code>10100001</code>的第6位， 答案：可以将该数与<code>00100000</code>进行按位异或运算;<code>10100001</code> ^ <code>00100000</code> = <code>10000001</code></p>

<h3>（4）我们使用异或来判断一个二进制数中1的数量是奇数还是偶数</h3>

<p>例如：求<code>10100001</code>中1的数量是奇数还是偶数； 答案：<code>1 ^ 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 = 1</code>,结果为<code>1</code>就是奇数个1，结果为<code>0</code>就是偶数个1； 应用：这条性质可用于奇偶校验（Parity Check），比如在串口通信过程中，每个字节的数据都计算一个校验位，数据和校验位一起发送出去，这样接收方可以根据校验位粗略地判断接收到的数据是否有误</p>

<h3>（5）校验和恢复</h3>

<p>校验和恢复主要利用的了异或的特性：<code>IF a ^ b = c THEN a ^ c = b</code> 应用：一个很好的应用实例是<code>RAID5</code>，使用3块磁盘（A、B、C）组成<code>RAID5</code>阵列，当用户写数据时，将数据分成两部分，分别写到磁盘A和磁盘B，<code>A ^ B</code>的结果写到磁盘C；当读取A的数据时，通过<code>B ^ C</code>可以对A的数据做校验，当A盘出错时，通过<code>B ^ C</code>也可以恢复A盘的数据。</p>

<p><code>RAID5</code>的实现比上述的描述复杂多了，但是原理就是使用 异或，有兴趣的同学看下<code>RAID5</code></p>

<h3>（6）经典题目：不使用其他空间，交换两个值</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a = a ^ b;
</span><span class='line'>b = a ^ b; //a ^ b ^ b = a ^ 0 = a;
</span><span class='line'>a = a ^ b;</span></code></pre></td></tr></table></div></figure>


<h3>（7）面试题：互换二进制数的奇偶位；</h3>

<p>题目：写一个宏定义，实现的功能是将一个int型的数的奇偶位互换，例如6的2进制为00000110，(从右向左)第一位与第二位互换，第三位与第四位互换，其余都是0不需要交换，得到00001001，输出应该为9；</p>

<p>思路：我们可以把我们的问题分为三步（难道这也是分治法吗 -。-），第一步，根据原值的偶数位获取到目标值的奇数位，并把不需要的位清零；第二步，根据原值的奇数位获取到目标值的偶数位，并把不需要的位清零；第三步：把上述两个残缺的目标值合并成一个完整的目标值；</p>

<p>代码为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 互换二进制数的奇偶位,第一位与第二位互换，第三位与第四位互换依次类推
</span><span class='line'>public static int N(int n){
</span><span class='line'>  return ((n&lt;&lt;1)&(0xAAAAAAAA))|((n&gt;&gt;1)&(0x55555555));
</span><span class='line'>}
</span><span class='line'>public static void main(String[] args) {
</span><span class='line'>  // 输出9  (1001)
</span><span class='line'>  System.out.println(N(6));
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>解释：</p>

<pre><code>1. 为简化说明，我们以4位二进制码为例，0xAAAAAAAA 我们用 1010 代替；0x55555555 我们用 0101 代替；

2. (n&lt;&lt;1)&amp;(1010) 把n先左移1位，再与1010做与运算，只保留移位之后的偶数位的值，奇数位全为0，实际上是只保留了n的奇数位的值，并把它们交换到了偶数位上。比如 n = 0110 , n&lt;&lt;1 = 1100, (n&lt;&lt;1) &amp; 1010 = 1000 ;

3. (n&gt;&gt;1)&amp;(0101) 把n右移一位，再与 0101 做与运算，只保留移位之后的奇数位的值，偶数位全为0，实际是只保留n 的偶数位的值，并把它们交换到对应的奇数位上。n = 0110； n&gt;&gt;1 = 0011； (n&gt;&gt;1) &amp; 0101 = 0001；

4. 最后做或运算（相加），得到1001。
</code></pre>

<h3>（8）超高频面试题：一个整型数组里除了N个数字之外，其他的数字都出现了两次，找出这N个数字；</h3>

<p>比如，从{1, 2, 3, 4, 5, 3, 2, 4, 5}中找出单个的数字： 1</p>

<p>让我们从最简单的，找一个数字开始(N=1)；</p>

<p>题目：</p>

<p>（LeetCode 中通过率最高的一道题） Single Number: Given an array of integers, every element appears twice except for one. Find that single one. Note:Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory? 思路： 拿到这个题目，本能的你会使用排序（数字文字我们常常需要排序），排序后可以来判断是否数字成对出现，思路很明显，但是排序的算法上限是 O(nlogn)，不符合题目要求；</p>

<p>学习了强大的异或，我们可以轻松的使用它的特性来完成这道题目：</p>

<p>（1）A ^ A = 0;</p>

<p>（2）异或满足交换律、结合律；</p>

<p>所有假设有数组：A B C B C D A 使用异或：</p>

<pre><code>    A ^ B ^ C ^ B ^ C ^ D ^ A
  = A ^ A ^ B ^ B ^ C ^ C ^ D
  = 0 ^ 0 ^ 0 ^ D
  = 0 ^ D
  = D
</code></pre>

<p>是不是很神奇？时间复杂度为O(n)，当然是线性的，空间复杂度O(1)；</p>

<p>代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public int singleNumber(int A[], int n) {
</span><span class='line'>        //特殊情况  
</span><span class='line'>        if(n&lt;=0) return -1;
</span><span class='line'>        if(n==1) return A[0];
</span><span class='line'>
</span><span class='line'>        int result = 0;
</span><span class='line'>        for (int i = 0; i &lt; n; i ++) {
</span><span class='line'>            result = result ^ A[i];
</span><span class='line'>        }
</span><span class='line'>        return result;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>接下来让我们增加一些难度：(N=2)</p>

<p>即题目：一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字？</p>

<p>思路：</p>

<pre><code>第一步：肯定还是像我们上面的解法一样，所有数进行异或，不过最终得到的结果是 a 和 b（假设 a 和 b 是落单的数字）两个值的异或结果 aXORb，没有直接得到 a 和 b 的值；

第二步：想办法得到 a 或者 b，假设 aXORb 为 00001001（F肯定不为0），根君 aXORb 的值我们发现，值为1的位（比如从右向左第一位）表示在此位上 a 和 b 的值不同；
所以，根据这个特点，我们找出来所有第一位为1的数进行异或，得到的就是 a 或者 b；

第三步：aXORb = a ^ b，假设我们已经找到了 a，根据异或特性，我们知道，b = aXORb ^ a；这样我们就可以找出 b；所以我们只需要循环两次；
</code></pre>

<p>这样我们的时间复杂度是 O(n)，空间复杂度是 O(1) 代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class Xor {
</span><span class='line'>
</span><span class='line'>  //输出 num 的低位中的第一个 1 的位置 ，
</span><span class='line'>  public static int getLowFirstAppearOne(int num){
</span><span class='line'>      return num & ~(num-1); // 通过 num & -num 找到,神奇的&运算
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  // 找到两个Single的数字
</span><span class='line'>  public static void findUniqueTwo(int[] arr , int len){
</span><span class='line'>      int a = 0 ;
</span><span class='line'>      int b = 0 ;
</span><span class='line'>      int temp = 0 ;
</span><span class='line'>      int aXORb = 0;
</span><span class='line'>      for (int i = 0; i &lt; len; i++) {
</span><span class='line'>          aXORb ^= arr[i];
</span><span class='line'>      }
</span><span class='line'>      int firstLocation = getLowFirstAppearOne(aXORb);
</span><span class='line'>      for (int i = 0; i &lt;len; i++) {
</span><span class='line'>          if ((arr[i]&firstLocation)==firstLocation) {
</span><span class='line'>              a ^= arr[i];
</span><span class='line'>          }
</span><span class='line'>      }
</span><span class='line'>      b = aXORb ^ a;
</span><span class='line'>      System.out.println("a="+a+" , b="+b);
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  public static void main(String[] args) {
</span><span class='line'>      int[] array = { 1, 2, 3, 4, 5, 3, 2, 4, 5, 9};
</span><span class='line'>      findUniqueTwo(array, array.length);
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>接下来让我们再增加一些难度：(N=3)</p>

<p>题目：一个整型数组里除了三个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字？</p>

<p>思路：</p>

<p>第一步：肯定还是像我们上面的解法一样，所有数进行异或，不过最终得到的结果是 a、b 和 c（假设 a、b 和 c 是落单的数字）三个值的异或结果 aXORbXORc，没有直接得到 a、b 和 c 的值；</p>

<p>第二步：想办法得到 a、b 和 c 中的一个，让偶们把问题简化一下；</p>

<p>假设一个数组中有3个不同的数字 a、b 和 c，已知 aXORbXORc = a ^ b ^ c ，求 a、b 和 c 。</p>

<p>思路： 1. 根据题目 aXORbXORc ^ a = b ^ c; aXORbXORc ^ b = a ^ c; aXORbXORc ^ c = a ^ b; 因为：(b ^ c) ^ (a ^ c) ^ (a ^ b) = 0; 所以：(aXORbXORc ^ a) ^ (aXORbXORc ^ b) ^ (aXORbXORc ^ c) = 0;</p>

<p>下一步是关键： 假设 X ^ Y ^ Z = 0，则 X Y Z 三个数的低位第一位为1的位置两个相同，一个不同； 比如 X: 00001000, Y: 00000100, Z: 00001100 Y和Z的低位第一位都是00000100， X的低位第一位是00001000； 这一步可以使用倒推法证明： 已知：三个数的低位第一位为1的位置有三种情况，一种就是全相同，一种就是两个不同，一个不同，一种就是三个不同； （1）如果是全相同，则 X ^ Y ^ Z != 0 (1 ^ 1 ^ 1 = 1)，与前提X ^ Y ^ Z = 0矛盾，不成立； （2）如果三个不同，则 X ^ Y ^ Z != 0 (1 ^ 0 ^ 0 = 1)，与前提X ^ Y ^ Z = 0矛盾，不成立； 所以结果是：两个不同，一个不同</p>

<p>(aXORbXORc ^ a) ^ (aXORbXORc ^ b) ^ (aXORbXORc ^ c) = 0; 所以三个数(aXORbXORc ^ a)、(aXORbXORc ^ b) 和 (aXORbXORc ^ c) 的低位第一位为1的位置两个相同，一个不同；那么我们获取到这三个数的低位第一位为1的位置后，进行异或并取低位第一位为1的位置，就可以找到三个中“一个不同”的低位第一位为1的位置，假设这个值为 firstOneBit。</p>

<p>遍历这三个数(aXORbXORc ^ a)、(aXORbXORc ^ b) 和 (aXORbXORc ^ c)，如果发现某个数异或 aXORbXORc 等于 firstOneBit，这个数就是“一个不同”的那个数；</p>

<p>找到了一个数，剩下的两个数，我们就可以通过上面的方法找出来；</p>

<p>第三步：完成了第二步的简化题，我们回到我们的问题，我们的问题比简化的问题多了一个成对的干扰数据，我们可以使用异或要去除干扰数据（记住，我们这个题目都是用异或i去除干扰数据的）；</p>

<p>这样我们的时间复杂度还是 O(n)，空间复杂度是 O(1)</p>

<p>代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;iostream&gt;
</span><span class='line'>#include &lt;assert.h&gt;
</span><span class='line'>using namespace std;
</span><span class='line'>
</span><span class='line'>int getFirstOneBit(int num) //输出 num 的低位中的第一个 1 的位置  
</span><span class='line'>{
</span><span class='line'>    return num & ~(num - 1);  // num 与 -num 相与找到
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void findTwo(int *array, int length){
</span><span class='line'>    int aXORb = 0;
</span><span class='line'>    int firstOneBit = 0;
</span><span class='line'>    int a = 0;
</span><span class='line'>    int b = 0;
</span><span class='line'>    for (int i = 0; i &lt; length; i++) {
</span><span class='line'>        aXORb ^= array[i];
</span><span class='line'>    }
</span><span class='line'>    assert(aXORb != 0); //保证题目要求，有两个single的数字
</span><span class='line'>    firstOneBit = getFirstOneBit(aXORb);
</span><span class='line'>    for (int i = 0; i &lt; length; ++i) {
</span><span class='line'>        if(array[i] & firstOneBit) {
</span><span class='line'>            a ^= array[i];
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    b = aXORb ^ a;
</span><span class='line'>    cout &lt;&lt; "a: " &lt;&lt; a &lt;&lt; endl;
</span><span class='line'>    cout &lt;&lt; "b: " &lt;&lt; b &lt;&lt; endl;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int findOne(int *array, int length) {
</span><span class='line'>    int aXORbXORc = 0;
</span><span class='line'>    int c = 0;
</span><span class='line'>    int firstOneBit = 0;
</span><span class='line'>    for (int i = 0; i &lt; length; ++i) {
</span><span class='line'>        aXORbXORc ^= array[i];
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    for (int i = 0; i &lt; length; ++i) {
</span><span class='line'>        firstOneBit ^= getFirstOneBit(aXORbXORc ^ array[i]); //使用异或会排除掉不相干的元素
</span><span class='line'>    }
</span><span class='line'>    // firstOneBit = getFirstOneBit(a ^ b) ^ getFirstOneBit(a ^ c) ^ getFirstOneBit(b ^ c);
</span><span class='line'>
</span><span class='line'>    firstOneBit = getFirstOneBit(firstOneBit); //获取到最低位下面要用
</span><span class='line'>
</span><span class='line'>    for (int i = 0; i &lt; length; ++i) {
</span><span class='line'>        if (getFirstOneBit(aXORbXORc ^ array[i]) == firstOneBit) {
</span><span class='line'>            c ^= array[i]; //使用异或会排除掉不相干的元素
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    cout &lt;&lt; "c: " &lt;&lt; c &lt;&lt; endl;
</span><span class='line'>    return c;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int main()
</span><span class='line'>{
</span><span class='line'>    int array1[] = {2, 5, 8, 2, 5, 8, 6, 7, 1};
</span><span class='line'>    int c = findOne(array1, 9);
</span><span class='line'>    int array2[] = {2, 5, 8, 2, 5, 8, 6, 7, 1, c}; //为了更好重用函数，我重新定义了一个数组让大家理解
</span><span class='line'>    findTwo(array2, 10);
</span><span class='line'>    return 0;
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>写这篇文档参考了《离散数学与应用》课本，参考了别人多个博客，如果我参考了你的博客，但没有注明出处，请联系告知，有错误的地方，希望可以指出来，也希望大家有更多的补充，非常感谢。</p>

<p>参考：</p>

<p><a href="http://zh.wikipedia.org/wiki/%E9%80%BB%E8%BE%91%E5%BC%82%E6%88%96">http://zh.wikipedia.org/wiki/%E9%80%BB%E8%BE%91%E5%BC%82%E6%88%96</a></p>

<p><a href="http://yjq24.blogbus.com/logs/41863963.html">http://yjq24.blogbus.com/logs/41863963.html</a></p>

<p><a href="http://wzw19191.blog.163.com/blog/static/131135470200992610551971/">http://wzw19191.blog.163.com/blog/static/131135470200992610551971/</a></p>

<p><a href="http://kapok.blog.51cto.com/517862/129941">http://kapok.blog.51cto.com/517862/129941</a></p>

<p><a href="http://blog.csdn.net/huxian370/article/details/8024416">http://blog.csdn.net/huxian370/article/details/8024416</a></p>

<p><a href="http://www.cnblogs.com/Ivony/archive/2009/07/23/1529254.html">http://www.cnblogs.com/Ivony/archive/2009/07/23/1529254.html</a></p>

<p><a href="http://blog.chinaunix.net/uid-20937170-id-3407361.html">http://blog.chinaunix.net/uid-20937170-id-3407361.html</a></p>

<p><a href="http://blog.csdn.net/yfkiss/article/details/11775569">http://blog.csdn.net/yfkiss/article/details/11775569</a></p>

<p><a href="http://blog.sina.com.cn/s/blog_88c9ddc50101810p.html">http://blog.sina.com.cn/s/blog_88c9ddc50101810p.html</a></p>

<p><a href="http://blog.csdn.net/pathuang68/article/details/7567027">http://blog.csdn.net/pathuang68/article/details/7567027</a></p>

<p><a href="http://blog.csdn.net/qingen1/article/details/12656763">http://blog.csdn.net/qingen1/article/details/12656763</a></p>

<p><a href="https://www.lijinma.com/blog/2014/05/29/amazing-xor/">https://www.lijinma.com/blog/2014/05/29/amazing-xor/</a></p>

<p>本文链接： <a href="http://zhanheng.github.io/blog/2016/06/14/xor/">http://zhanheng.github.io/blog/2016/06/14/xor/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery实现常用功能]]></title>
    <link href="http://zhanheng.github.io/blog/2016/06/11/jsfixedsidebar/"/>
    <updated>2016-06-11T14:34:59+08:00</updated>
    <id>http://zhanheng.github.io/blog/2016/06/11/jsfixedsidebar</id>
    <content type="html"><![CDATA[<h4>1.在实际开发过程中，当网页内容往下滚动一定距离的时候，左边的菜单栏通常需要固定。</h4>

<p>原生js：</p>

<pre><code>1.封装原生的js常用方法     2.对sideBar进行固定操作，改变其css
</code></pre>

<figure class='code'><figcaption><span>封装原生js的常用方法 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script>
</span><span class='line'>      var Getid = function(id){ return document.getElementById(id);}
</span><span class='line'>      var addEvent = function(obj,event,fun){
</span><span class='line'>          if(obj.addEventListener()){
</span><span class='line'>              obj.addEventListener(event,fun,false);
</span><span class='line'>          }else if(obj.attachEvent()){
</span><span class='line'>              obj.attachEvent("on"+event,fun);
</span><span class='line'>          }
</span><span class='line'>      }
</span><span class='line'>  &lt;/script></span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>用jQuery改变侧边栏的css </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script>
</span><span class='line'>      //获取菜单栏的div
</span><span class='line'>      var lnSider = Getid("left-nav"); 
</span><span class='line'>      addEvent(window,"scroll",function(){
</span><span class='line'>      var scrollHeight = document.body.scrollTop;
</span><span class='line'>      var contentHeight=Getid("changeid").offsetHeight - lnSider.offsetHeight;
</span><span class='line'>      if(scrollHeight>253 && scrollHeight&lt;contentHeight+253){
</span><span class='line'>          lnSider.style.position = "absolute";
</span><span class='line'>          lnSider.style.left = "0px";
</span><span class='line'>          lnSider.style.top = scrollHeight - 253 +"px";
</span><span class='line'>      }else if(scrollHeight&lt;=253){
</span><span class='line'>          lnSider.style.position = "absolute";
</span><span class='line'>          lnSider.style.left = "0px";
</span><span class='line'>          lnSider.style.top = "0px";
</span><span class='line'>      }
</span><span class='line'>  });
</span><span class='line'>  &lt;/script></span></code></pre></td></tr></table></div></figure>


<p>使用jQuery进行代码优化</p>

<figure class='code'><figcaption><span>用js改变侧边栏的css </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script>
</span><span class='line'>      //获取window对象
</span><span class='line'>      var jWindow = $(window); 
</span><span class='line'>      jWindow.scroll(function(){
</span><span class='line'>          var scrollHeight = jWindow.scrollTop();
</span><span class='line'>          var contentHeight= $("#changeid").Height() - $("#left-nav").Height();
</span><span class='line'>          if(scrollHeight>253 && scrollHeight&lt;contentHeight+253){
</span><span class='line'>              $("#left-nav").css({
</span><span class='line'>                  position:"absolute";
</span><span class='line'>                  left:"0px";
</span><span class='line'>                  top:scrollHeight - 253 +"px";
</span><span class='line'>              });
</span><span class='line'>          }else if(scrollHeight&lt;=253){
</span><span class='line'>              $("#left-nav").css({
</span><span class='line'>                  position:"absolute";
</span><span class='line'>                  left:"0px";
</span><span class='line'>                  top:"0px";
</span><span class='line'>              });
</span><span class='line'>          }
</span><span class='line'>      });
</span><span class='line'>  &lt;/script></span></code></pre></td></tr></table></div></figure>


<h4>2.用jQuery实现图片的瀑布流并模拟动态加载 ，实际应用中很常见。</h4>

<p>主要思想就是:先获取每个照片盒子的宽度，计算出屏幕能放几张照片。从第二行的照片开始，放在上一行高度最小的照片下面</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//实现瀑布流图片定位
</span><span class='line'>function imgLocation(){
</span><span class='line'>    var box = $(".box");
</span><span class='line'>    var boxWidth = box.eq(0).width();
</span><span class='line'>    var num = Math.floor($(window).width()/boxWidth);
</span><span class='line'>  //存第一行照片的高度
</span><span class='line'>    var boxArr=[];
</span><span class='line'>    box.each(function(index,value){
</span><span class='line'>        var boxHeight = box.eq(index).height();
</span><span class='line'>        if(index&lt;num){
</span><span class='line'>            boxArr[index]= boxHeight;
</span><span class='line'>        }else{
</span><span class='line'>          //找到boxArr数组中最小的高度
</span><span class='line'>            var minboxHeight = Math.min.apply(null,boxArr);
</span><span class='line'>          //找到boxArr数组中最小的高度的下标索引
</span><span class='line'>            var minboxIndex = $.inArray(minboxHeight,boxArr);
</span><span class='line'>          //找到位置后，改变当前照片盒子的CSS样式
</span><span class='line'>            $(value).css({
</span><span class='line'>                "position":"absolute",
</span><span class='line'>                "top":minboxHeight,
</span><span class='line'>                "left":box.eq(minboxIndex).position().left
</span><span class='line'>            });
</span><span class='line'>          //堆叠照片以后，更新数组的值
</span><span class='line'>            boxArr[minboxIndex]+=box.eq(index).height();
</span><span class='line'>        }
</span><span class='line'>    });
</span><span class='line'>}
</span><span class='line'>// 是否滚动到最后一张照片的一半的位置
</span><span class='line'>function scrollside(){
</span><span class='line'>    var box = $(".box");
</span><span class='line'>    var lastboxHeight = box.last().get(0).offsetTop+Math.floor(box.last().height()/2);
</span><span class='line'>    var documentHeight = $(document).width();
</span><span class='line'>    var scrollHeight = $(window).scrollTop();
</span><span class='line'>    return (lastboxHeight&lt;scrollHeight+documentHeight)?true:false;
</span><span class='line'>}
</span><span class='line'>// 模拟动态加载的过程
</span><span class='line'>$(document).ready(function(){
</span><span class='line'>    $(window).on("load",function(){
</span><span class='line'>        imgLocation();
</span><span class='line'>      //模拟后台加载出来的数据
</span><span class='line'>        var dataImg = {"data":[{"src":"1.jpg"},{"src":"2.jpg"},{"src":"3.jpg"},{"src":"4.jpg"},{"src":"5.jpg"}]};
</span><span class='line'>        window.onscroll = function(){
</span><span class='line'>            if(scrollside()){
</span><span class='line'>              if($(".box").length&lt;=125){
</span><span class='line'>                  $.each(dataImg.data,function(index,value){
</span><span class='line'>                    var box = $("&lt;div>").addClass("box").appendTo($("#container"));
</span><span class='line'>                    var content = $("&lt;div>").addClass("content").appendTo(box);
</span><span class='line'>                    $("&lt;img>").attr("src","./img/"+$(value).attr("src")).appendTo(content);
</span><span class='line'>                  });
</span><span class='line'>                  // 图片加入以后实现瀑布流定位
</span><span class='line'>                  imgLocation();
</span><span class='line'>              }else{
</span><span class='line'>                  return false;
</span><span class='line'>              }
</span><span class='line'>            }
</span><span class='line'>        };
</span><span class='line'>    });
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tomcat 虚拟目录配置]]></title>
    <link href="http://zhanheng.github.io/blog/2016/05/24/Tomcat/"/>
    <updated>2016-05-24T13:10:30+08:00</updated>
    <id>http://zhanheng.github.io/blog/2016/05/24/Tomcat</id>
    <content type="html"><![CDATA[<p>Tomcat 是开发过程中经常用到的容器，它是免费的基于 JAVA 的开源 Web 应用服务器。由于它拥有先进的技术、稳定的性能以及良好的扩展性，深受 JAVA 开发者的喜爱以及得到众多软件开发商的认可，成为目前比较流行的 Web 应用服务器。 今天将学习到的Tomcat 虚拟目录配置进行了整理。</p>

<h4>例如：<a href="http://www.xyz.com/course/1024.html">http://www.xyz.com/course/1024.html</a></h4>

<h5>1.Tomcat的基准目录、根目录 。</h5>

<p>上述URL中www.xyz.com表示：WEB服务器的地址(名称)，后边的‘/’代表站点根目录</p>

<p>Tomcat的默认根目录是：apache-tomcat-8.0.24\webapps\ROOT
其中webapps是Tomcat的默认基准目录，Tomcat启动时会加载基准目录下的所有web应用.</p>

<p>修改基准目录的方法：</p>

<h5>方法一：通过修改conf文件夹下的server.xml文件的的Host节点在的appbase属性即可。</h5>

<blockquote><p><code>&lt;Host name="localhost" appBase="webapps" unpackWARs="true" autoDeploy="true"&gt;&lt;/Host&gt;</code></p></blockquote>

<h5>方法二：使用server.xml文件中的<Context>元素（不建议）</h5>

<blockquote><p><code>&lt;Context docBase="E:\myapp" path="" autoDeploy="true"&gt;</code></p></blockquote>

<h5>方法三：在<catalina_home>/conf/Catalina/localhost/下增加ROOT.xml文件（推荐）</h5>

<blockquote><p><code>&lt;Context docBase="E:\myapp" path="" autoDeploy="true"&gt;</code></p></blockquote>

<h5>2.虚拟子目录。</h5>

<p>物理目录：实际存放在主目录(根目录)的子文件夹</p>

<p>虚拟子目录：URL地址中不存在于主目录(根目录)下的子文件夹</p>

<p>上述URL中的course就是一个虚拟子目录。</p>

<p>下面介绍 修改虚拟子目录的方法：</p>

<h5>方法一：通过修改conf文件夹下的server.xml文件的的<Context>元素在的path属性即可,默认是空的。（不建议）</h5>

<blockquote><p><code>&lt;Context docBase="E:\myapp" path="/myweb" autoDeploy="true"&gt;</code></p></blockquote>

<h5>方法二：在<catalina_home>/conf/Catalina/localhost/下增加xml文件,增加<Context>元素这种方法path属性中的值不再起作用，xml文件名就是虚拟子目录的名称</h5>

<p>先在E盘建一个mycourse文件夹并新建个test.html文件，在<catalina_home>/conf/Catalina/localhost/下增加course.xml文件,增加<Context>元素，最后访问localhost:8080/course/test.html即可。</p>

<p>如果有多级子目录，文件名中的‘/’改用‘#’代替,例如myapp#course.xml,最后访问localhost:8080/myapp/course/test.html即可。</p>

<blockquote><p><code>&lt;Context docBase="E:\mycourse" path="" autoDeploy="true"&gt;</code></p></blockquote>

<h5>方法三：在基准目录下直接放文件夹（通俗易懂）</h5>

<h5>方法四：在基准目录下直接放WAR文件</h5>

<p> 由于 有 unpackWARs=&ldquo;true&rdquo; autoDeploy=&ldquo;true&rdquo; 这两个属性。自动解压并且部署</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java数据库连接池之 HikariCP]]></title>
    <link href="http://zhanheng.github.io/blog/2016/05/20/DataBasePool/"/>
    <updated>2016-05-20T23:10:30+08:00</updated>
    <id>http://zhanheng.github.io/blog/2016/05/20/DataBasePool</id>
    <content type="html"><![CDATA[<p>在web项目开发过程中，数据的持久化是个老生常谈的话题，如何高效的与数据库建立连接就是我们需要解决的问题。</p>

<h5>连接池技术的核心思想：连接复用，通过建立一个数据库连接池以及一套连接使用、分配、管理策略，使得该连接池中的连接可以得到高效、安全的复用，避免了数据库连接频繁建立、关闭的开销。</h5>

<h4>连接池的组成部分：连接池的建立、连接池的管理、连接池的关闭。</h4>

<p>自己维护一些数据库连接，需要使用的时候直接使用其中一个连接，用完之后不是关闭而是将他归还，等待其他操作使用。</p>

<p>proxool、DBCP、C3P0最为常见的三种JDBC连接池技术。</p>

<p>proxool是一种Java数据库连接池技术。sourceforge下的一个开源项目,这个项目提供一个健壮、易用的连接池，最为关键的是这个连接池提供监控的功能，方便易用，便于发现连接泄漏的情况。</p>

<p>单例模式（Singleton）简单的说就是类在系统中只能被实例化一次，外界只有唯一一个类实例可以使用。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class Singleton {  
</span><span class='line'>    private static class LazyLoadSingleton{  
</span><span class='line'>        private static final Singleton singleton = new Singleton();  
</span><span class='line'>    }   
</span><span class='line'>    private Singleton() {} 
</span><span class='line'>    public static Singleton getSingleton(){  
</span><span class='line'>        return LazyLoadSingleton.singleton;  
</span><span class='line'>    }  
</span><span class='line'>} </span></code></pre></td></tr></table></div></figure>


<p>但是今天在这里介绍一个重量级的数据库连接池HiKariCP,它是数据库连接池的一个后起之秀，号称性能最好，可以完美地PK掉其他连接池。可能你会问 ：什么？为何要使用HiKariCP？不是有C3P0/DBCP这些成熟的数据库连接池吗？</p>

<p>这要先从BoneCP说起：一直用的好好的，为什么又搞出一个BoneCP来？因为，传说中BoneCP在快速这个特点上做到了极致，官方数据是C3P0等的25倍左右。看数据对比图：
<img src="http://img.blog.csdn.net/20150717155314196?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="image" /></p>

<p>但是……什么？又来一个CP？……什么是Hikari？
Hikari来自日文，是“光”（阳光的光，不是光秃秃的光）的意思。作者估计是为了借助这个词来暗示这个CP速度飞快。不知作者是不是日本人，不过日本也有很多优秀的码农，听说比特币据说日本人搞出来的。。。</p>

<p>这个产品的口号是“快速、简单、可靠”。实际情况跟这个口号真的匹配吗？又是有图有真相
<img src="http://img.blog.csdn.net/20150717155421650?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="image" /></p>

<p>这个图，也间接地、再一次地证明了boneCP比c3p0强大很多，当然，跟“光”比起来，又弱了不少啊。</p>

<p>那么，这么好的P是怎么做到的呢？官网详细地说明了HikariCP所做的一些优化，总结如下：
字节码精简：优化代码，直到编译后的字节码最少，这样，CPU缓存可以加载更多的程序代码；
优化代理和拦截器：减少代码，例如HikariCP的Statement proxy只有100行代码，只有BoneCP的十分之一；
自定义数组类型（FastStatementList）代替ArrayList：避免每次get()调用都要进行range check，避免调用remove()时的从头到尾的扫描；
自定义集合类型（ConcurrentBag）：提高并发读写的效率；
其他针对BoneCP缺陷的优化，比如对于耗时超过一个CPU时间片的方法调用的研究（但没说具体怎么优化）。
很多优化的对比都是针对BoneCP的。</p>

<p>几个连接池的代码量对比（代码量越少，一般意味着执行效率越高、发生bug的可能性越低）：</p>

<p><img src="http://img.blog.csdn.net/20150717155444740?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="image" /></p>

<p>第三方关于速度的测试：</p>

<p><img src="http://img.blog.csdn.net/20150717155541525?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="image" /></p>

<p>也许你会说，速度高，如果不稳定也是硬伤啊。于是，关于稳定性的图也来了:
<img src="http://img.blog.csdn.net/20150717155601214?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="image" /></p>

<p>另外，关于可靠性方面，也是有实验和数据支持的。对于数据库连接中断的情况，通过测试getConnection()，各种CP的不相同处理方法如下：
（所有CP都配置了跟connectionTimeout类似的参数为5秒钟）
<strong>HikariCP</strong>：等待5秒钟后，如果连接还是没有恢复，则抛出一个SQLExceptions 异常；后续的getConnection()也是一样处理；</p>

<p><strong>C3P0</strong>：完全没有反应，没有提示，也不会在“CheckoutTimeout”配置的时长超时后有任何通知给调用者；然后等待2分钟后终于醒来了，返回一个error；</p>

<p><strong>Tomcat</strong>：返回一个connection，然后……调用者如果利用这个无效的connection执行SQL语句……结果可想而知；大约55秒之后终于醒来了，这时候的getConnection()终于可以返回一个error，但没有等待参数配置的5秒钟，而是立即返回error；</p>

<p><strong>BoneCP</strong>：跟Tomcat的处理方法一样；也是大约55秒之后才醒来，有了正常的反应，并且终于会等待5秒钟之后返回error了；</p>

<p>可见，HikariCP的处理方式是最合理的。根据这个测试结果，对于各个CP处理数据库中断的情况，评分如下：</p>

<p><img src="http://img.blog.csdn.net/20150717155628899?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="image" /></p>

<p>下面来看看HiKariCP的数据源配置，如果之前用的是BoneCP配置的数据源，那么，就简单了，只需要把dataSource换一下，稍微调整一下参数就行了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!-- Hikari Datasource --&gt;
</span><span class='line'> &lt;bean id="dataSourceHikari" class="com.zaxxer.hikari.HikariDataSource"  destroy-method="shutdown"&gt;
</span><span class='line'>  &lt;!-- &lt;property name="driverClassName" value="${db.driverClass}" /&gt; --&gt; &lt;!-- 无需指定，除非系统无法自动识别 --&gt;
</span><span class='line'>  &lt;property name="jdbcUrl" value="jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=UTF-8" /&gt;
</span><span class='line'>  &lt;property name="username" value="${db.username}" /&gt;
</span><span class='line'>  &lt;property name="password" value="${db.password}" /&gt;
</span><span class='line'>   &lt;!-- 连接只读数据库时配置为true， 保证安全 --&gt;
</span><span class='line'>  &lt;property name="readOnly" value="false" /&gt;
</span><span class='line'>  &lt;!-- 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒 --&gt;
</span><span class='line'>  &lt;property name="connectionTimeout" value="30000" /&gt;
</span><span class='line'>  &lt;!-- 一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟 --&gt;
</span><span class='line'>  &lt;property name="idleTimeout" value="600000" /&gt;
</span><span class='line'>  &lt;!-- 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒，参考MySQL wait_timeout参数（show variables like '%timeout%';） --&gt;
</span><span class='line'>  &lt;property name="maxLifetime" value="1800000" /&gt;
</span><span class='line'>  &lt;!-- 连接池中允许的最大连接数。缺省值：10；推荐的公式：((core_count * 2) + effective_spindle_count) --&gt;
</span><span class='line'>  &lt;property name="maximumPoolSize" value="15" /&gt;
</span><span class='line'> &lt;/bean&gt;</span></code></pre></td></tr></table></div></figure>


<p>其中，很多配置都使用缺省值就行了，除了maxLifetime和maximumPoolSize要注意自己计算一下。
其他的配置（sqlSessionFactory、MyBatis MapperScannerConfigurer、transactionManager等）统统不用变。</p>

<p>其他关于Datasource配置参数的建议：
Configure your HikariCP idleTimeout and maxLifeTime settings to be one minute less than the wait_timeout of MySQL.
对于有Java连接池的系统，建议MySQL的wait_timeout使用缺省的8小时（<a href="http://www.rackspace.com/knowledge_center/article/how-to-change-the-mysql-timeout-on-a-server%EF%BC%89%E3%80%82">http://www.rackspace.com/knowledge_center/article/how-to-change-the-mysql-timeout-on-a-server%EF%BC%89%E3%80%82</a></p>

<p>另外：对于web项目，记得要配置：destroy-method=&ldquo;shutdown&rdquo;</p>

<blockquote><p><a href="https://github.com/brettwooldridge/HikariCP/wiki/Down-the-Rabbit-Hole">https://github.com/brettwooldridge/HikariCP/wiki/Down-the-Rabbit-Hole</a></p>

<p><a href="http://www.bubuko.com/infodetail-978464.html">http://www.bubuko.com/infodetail-978464.html</a></p>

<p><a href="https://github.com/brettwooldridge/HikariCP/wiki/Bad-Behavior:-Handling-Database-Down">https://github.com/brettwooldridge/HikariCP/wiki/Bad-Behavior:-Handling-Database-Down</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[防止XSS攻击]]></title>
    <link href="http://zhanheng.github.io/blog/2016/05/16/XssSQLSecurity/"/>
    <updated>2016-05-16T10:15:30+08:00</updated>
    <id>http://zhanheng.github.io/blog/2016/05/16/XssSQLSecurity</id>
    <content type="html"><![CDATA[<p>在开发项目的过程中，网站的安全问题不能被忽视，其中Xss跨脚本攻击很常见。下面就XSS攻击做一下基本介绍，同时给出了我自己的解决办法。</p>

<h5>XSS又称CSS，全称Cross Site Script，跨站脚本攻击，是Web程序中常见的漏洞，XSS属于被动式且用于客户端的攻击方式，所以容易被忽略其危害性。其原理是攻击者向有XSS漏洞的网站中输入(传入)恶意的HTML代码，当其它用户浏览该网站时，这段HTML代码会自动执行，从而达到攻击的目的。如，盗取用户Cookie、破坏页面结构、重定向到其它网站等。</h5>

<p>举个简单的例子：页面名字叫test.jsp：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;html&gt;
</span><span class='line'>&lt;head&gt;
</span><span class='line'>&lt;title&gt;XSS测试&lt;/title&gt;
</span><span class='line'>&lt;/head&gt;
</span><span class='line'>&lt;body&gt;
</span><span class='line'>页面内容：&lt;%=request.getParameter("content")%&gt;
</span><span class='line'>&lt;/body&gt;
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<p>请求下面链接就会出现问题了：
<code>http://www.domain.com/test.jsp?content=&lt;script&gt;alert(' XSS注入' ); &lt;/script&gt;</code>
为了防止在请求链接中插入恶意的代码，我采用了以下方法：
首先自定义一个Filter 取名XssFilter, 在Web.xml中配置如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> &lt;filter&gt;
</span><span class='line'>  &lt;filter-name&gt;XssFilter&lt;/filter-name&gt;
</span><span class='line'>  &lt;filter-class&gt;test.XssFilter&lt;/filter-class&gt;
</span><span class='line'>&lt;/filter&gt;
</span><span class='line'>&lt;filter-mapping&gt;
</span><span class='line'>  &lt;filter-name&gt;XssFilter&lt;/filter-name&gt;
</span><span class='line'>  &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
</span><span class='line'>&lt;/filter-mapping&gt;
</span></code></pre></td></tr></table></div></figure>


<p>第二步，自定义一个类继承HttpServletRequestWrapper类，并重写父类的方法。
其中包括getParameter() ， getHeader() ,getParameterValues()
其中最重要的是自定义一个过滤特殊字符的方法。</p>

<p>具体实现代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import javax.servlet.http.HttpServletRequest;
</span><span class='line'>import javax.servlet.http.HttpServletRequestWrapper;
</span><span class='line'>
</span><span class='line'>public class XssHttpServletRequestWapper extends HttpServletRequestWrapper {
</span><span class='line'>
</span><span class='line'>  public XssHttpServletRequestWapper(HttpServletRequest request) {
</span><span class='line'>      super(request);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @Override
</span><span class='line'>  public String getParameter(String name) {
</span><span class='line'>      return clearXss(super.getParameter(name));
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  @Override
</span><span class='line'>  public String getHeader(String name) {
</span><span class='line'>      return clearXss(super.getHeader(name));
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @Override
</span><span class='line'>  public String[] getParameterValues(String name) {
</span><span class='line'>      String[] values = super.getParameterValues(name);
</span><span class='line'>      String[] newValues = new String[values.length];
</span><span class='line'>      for (int i = 0; i &lt; values.length; i++) {
</span><span class='line'>          newValues[i] = clearXss(values[i]);
</span><span class='line'>      }
</span><span class='line'>      return newValues;
</span><span class='line'>  }
</span><span class='line'>  /**
</span><span class='line'>   *  处理 字符转义 
</span><span class='line'>   *  &gt; &lt; ( ) '  javascript: 
</span><span class='line'>   */
</span><span class='line'>  private String clearXss(String value){
</span><span class='line'>      if (value==null || "".equals(value)) {
</span><span class='line'>          return value;
</span><span class='line'>      }
</span><span class='line'>      value = value.replaceAll("&lt;", "&lt").replaceAll("&gt;", "&gt");
</span><span class='line'>      value = value.replaceAll("(", "&#40").replaceAll("\\)", "&#41");
</span><span class='line'>      value = value.replaceAll("'", "&#39");
</span><span class='line'>      value = value.replaceAll("eval\\((.*)\\)", "");
</span><span class='line'>      value = value.replaceAll("[\\\"\\\'][\\s]*javascript:(.*)[\\\"\\\']", "\"\"");
</span><span class='line'>      value = value.replaceAll("script", "");
</span><span class='line'>      return value;
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>最后一步，在自定义的Filter中引用上述方法，执行过滤操作。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import java.io.IOException;
</span><span class='line'>import javax.servlet.Filter;
</span><span class='line'>import javax.servlet.FilterChain;
</span><span class='line'>import javax.servlet.FilterConfig;
</span><span class='line'>import javax.servlet.ServletException;
</span><span class='line'>import javax.servlet.ServletRequest;
</span><span class='line'>import javax.servlet.ServletResponse;
</span><span class='line'>import javax.servlet.http.HttpServletRequest;
</span><span class='line'>
</span><span class='line'>public class XssFilter implements Filter {
</span><span class='line'>  public void doFilter(ServletRequest request, ServletResponse response,
</span><span class='line'>          FilterChain chain) throws IOException, ServletException {
</span><span class='line'>      XssHttpServletRequestWapper xssRequest = new XssHttpServletRequestWapper((HttpServletRequest) request);
</span><span class='line'>        chain.doFilter(xssRequest, response);
</span><span class='line'>  }
</span><span class='line'>  public void init(FilterConfig filterConfig) throws ServletException {
</span><span class='line'>      
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public void destroy() {
</span><span class='line'>      
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>以上是我整个解决的思路和方法，比较容易能想到，能防止大部分的Xss攻击，一些具体的要求还得大家在开发过程中去留意和总结。</p>

<blockquote><p><a href="http://www.2cto.com/Article/201312/264747.html">http://www.2cto.com/Article/201312/264747.html</a></p>

<p><a href="http://hc24.iteye.com/blog/1995213">http://hc24.iteye.com/blog/1995213</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[字符串加密]]></title>
    <link href="http://zhanheng.github.io/blog/2016/05/14/StringEncrypt/"/>
    <updated>2016-05-14T23:10:30+08:00</updated>
    <id>http://zhanheng.github.io/blog/2016/05/14/StringEncrypt</id>
    <content type="html"><![CDATA[<h4>选择一个单词作为密钥，然后输入明文。输出密文</h4>

<p>举例：
选择一个单词作为密匙：TRAILBLAZERS<br/>
明文Attack AT DAWN(黎明时攻击)</p>

<p>如果单词中包含有重复的字母，只保留第1个，其余几个丢弃。现在，修改过的那个单词置于字母表的下面，如下所示：</p>

<p>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</p>

<p>T R A I L B Z E S C D F G H J K M N O P Q U V W X Y</p>

<p>其他的用字母表中剩余的字母填充完整。在对信息进行加密时，信息中的每个字母被固定于顶上那行，并用下面那行的对应字母一一取代原文的字母(字母字符的大小写状态应该保留)。</p>

<p>所以最后的密文是 <strong>Tpptad TP ITVH</strong></p>

<figure class='code'><figcaption><span>字符串加密 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public static String encrypt(String key, String data ){
</span><span class='line'>       List&lt;Character> list = new ArrayList&lt;Character>();
</span><span class='line'>       String p = "abcdefghijklmnopqrstuvwxyz";
</span><span class='line'>       String res = "";
</span><span class='line'>      // 去重
</span><span class='line'>       for(int i = 0 ; i&lt;key.length() ;i++){
</span><span class='line'>           if(!list.contains(key.charAt(i))){
</span><span class='line'>               list.add(key.charAt(i));
</span><span class='line'>               res+=key.charAt(i);
</span><span class='line'>           }
</span><span class='line'>       } 
</span><span class='line'>      // 拼接
</span><span class='line'>       StringBuilder sb = new StringBuilder();
</span><span class='line'>       sb.append(res);
</span><span class='line'>       for (int i = 0; i &lt; p.length(); i++) {
</span><span class='line'>         if (!sb.toString().contains(p.substring(i, i+1).toLowerCase())
</span><span class='line'>             &&!sb.toString().contains(p.substring(i, i+1).toUpperCase())) {
</span><span class='line'>             sb.append(p.charAt(i));
</span><span class='line'>         }
</span><span class='line'>       }
</span><span class='line'>       String result = "";
</span><span class='line'>       String str = data.toLowerCase();
</span><span class='line'>       String temp= sb.toString();
</span><span class='line'>     //处理输出
</span><span class='line'>       for (int i = 0; i &lt; str.length(); i++) {
</span><span class='line'>        int index= p.indexOf(str.substring(i, i+1));//找到字符出现的位置
</span><span class='line'>        if (Character.isLowerCase(data.charAt(i))) {// 小写字母
</span><span class='line'>            result+= Character.toLowerCase(temp.charAt(index)) ;
</span><span class='line'>        }else if(Character.isUpperCase(data.charAt(i))){// 大写字母
</span><span class='line'>            result+= Character.toUpperCase(temp.charAt(index)) ;
</span><span class='line'>        }else // 处理非字母的
</span><span class='line'>            result+=data.charAt(i);
</span><span class='line'>       }
</span><span class='line'>       return result;
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<h3>把一个字符串的大写字母放到字符串的后面，各个字符的相对位置不变，不能申请额外的空间</h3>

<p>借助冒泡排序的思想，大写字母往后移动，小写字母往前移动。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public static String sort(String string) {
</span><span class='line'>      int y = 0;
</span><span class='line'>      int nLen = string.length();
</span><span class='line'>      char[] str = string.toCharArray();
</span><span class='line'>      for (int i = nLen - 1; i >= 0; i--) {
</span><span class='line'>          if (str[i] >= 'A' && str[i] &lt;= 'Z') {
</span><span class='line'>              char temp = str[i]; //值存起来
</span><span class='line'>              int k = i;          //下标存起来
</span><span class='line'>              for (; k &lt; nLen - 1 - y; k++)
</span><span class='line'>                  str[k] = str[k + 1]; //小写字母往前移动
</span><span class='line'>              str[k] = temp;  //把大写字母放到后边去
</span><span class='line'>              y++;            //大写字母个数
</span><span class='line'>          }
</span><span class='line'>      }
</span><span class='line'>      return String.valueOf(str);
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
