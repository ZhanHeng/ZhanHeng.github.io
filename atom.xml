<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Blog Like a Hacker]]></title>
  <link href="http://zhanheng.github.io/atom.xml" rel="self"/>
  <link href="http://zhanheng.github.io/"/>
  <updated>2016-05-18T11:26:47+08:00</updated>
  <id>http://zhanheng.github.io/</id>
  <author>
    <name><![CDATA[ZhanHeng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[segmentTree]]></title>
    <link href="http://zhanheng.github.io/blog/2016/05/14/segmenttree/"/>
    <updated>2016-05-14T23:10:30+08:00</updated>
    <id>http://zhanheng.github.io/blog/2016/05/14/segmenttree</id>
    <content type="html"><![CDATA[<h1>你好 Octopress</h1>

<h2>这里介绍Segmentree算法</h2>

<p><strong>这段文字被加粗了</strong></p>

<p><code>标亮</code></p>

<ul>
<li>Android</li>
<li>PHP</li>
<li>HTML

<ul>
<li>CSS3</li>
<li>HTML5

<blockquote><p>引用</p></blockquote></li>
</ul>
</li>
</ul>


<p><a href="http://www.baidu.com">百度一下</a></p>

<p><img src="http://www.nxist.com/Economic/images/banner1.jpg" alt="image" /></p>

<p><video width='640' height='320' preload='metadata' controls poster='http://assets.jikexueyuan.com/practice/list_android.jpg'><source src='http://static-jkxy.qiniudn.com/event/jkxy_profile20150318.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'></video></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class SegmentTree{
</span><span class='line'>  public static void main(String args[]){
</span><span class='line'>      System.out.println("Hello Octopress!");
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>快速排序Java版 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void sort(int []a, int left, int right){
</span><span class='line'>        if(left >= right)/*如果左边索引大于或者等于右边的索引就代表已经整理完成一个组了*/
</span><span class='line'>        {
</span><span class='line'>            return ;
</span><span class='line'>        }
</span><span class='line'>        int i = left;
</span><span class='line'>        int j = right;
</span><span class='line'>        int key = a[left];
</span><span class='line'>
</span><span class='line'>        while(i &lt; j)                               /*控制在当组内寻找一遍*/
</span><span class='line'>        {
</span><span class='line'>            while(i &lt; j && key &lt;= a[j])
</span><span class='line'>            {
</span><span class='line'>                j--;/*向前寻找*/
</span><span class='line'>            }
</span><span class='line'>            a[i] = a[j];
</span><span class='line'>            while(i &lt; j && key >= a[i])
</span><span class='line'>            {
</span><span class='line'>                i++;
</span><span class='line'>            }
</span><span class='line'>            a[j] = a[i];
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        a[i] = key;/*当在当组内找完一遍以后就把中间数key回归*/
</span><span class='line'>        sort(a, left, i - 1);/*最后用同样的方式对分出来的左边的小组进行同上的做法*/
</span><span class='line'>        sort(a, i + 1, right);/*用同样的方式对分出来的右边的小组进行同上的做法*/
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[字符串加密]]></title>
    <link href="http://zhanheng.github.io/blog/2016/05/14/HelloWorld/"/>
    <updated>2016-05-14T23:10:30+08:00</updated>
    <id>http://zhanheng.github.io/blog/2016/05/14/HelloWorld</id>
    <content type="html"><![CDATA[<h4>选择一个单词作为密钥，然后输入明文。输出密文</h4>

<p>举例：
选择一个单词作为密匙：TRAILBLAZERS<br/>
明文Attack AT DAWN(黎明时攻击)</p>

<p>如果单词中包含有重复的字母，只保留第1个，其余几个丢弃。现在，修改过的那个单词置于字母表的下面，如下所示：</p>

<p>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</p>

<p>T R A I L B Z E S C D F G H J K M N O P Q U V W X Y</p>

<p>其他的用字母表中剩余的字母填充完整。在对信息进行加密时，信息中的每个字母被固定于顶上那行，并用下面那行的对应字母一一取代原文的字母(字母字符的大小写状态应该保留)。</p>

<p>所以最后的密文是 <strong>Tpptad TP ITVH</strong></p>

<figure class='code'><figcaption><span>字符串加密 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public static String encrypt(String key, String data ){
</span><span class='line'>       List&lt;Character> list = new ArrayList&lt;Character>();
</span><span class='line'>       String p = "abcdefghijklmnopqrstuvwxyz";
</span><span class='line'>       String res = "";
</span><span class='line'>      // 去重
</span><span class='line'>       for(int i = 0 ; i&lt;key.length() ;i++){
</span><span class='line'>           if(!list.contains(key.charAt(i))){
</span><span class='line'>               list.add(key.charAt(i));
</span><span class='line'>               res+=key.charAt(i);
</span><span class='line'>           }
</span><span class='line'>       } 
</span><span class='line'>      // 拼接
</span><span class='line'>       StringBuilder sb = new StringBuilder();
</span><span class='line'>       sb.append(res);
</span><span class='line'>       for (int i = 0; i &lt; p.length(); i++) {
</span><span class='line'>         if (!sb.toString().contains(p.substring(i, i+1).toLowerCase())
</span><span class='line'>             &&!sb.toString().contains(p.substring(i, i+1).toUpperCase())) {
</span><span class='line'>             sb.append(p.charAt(i));
</span><span class='line'>         }
</span><span class='line'>       }
</span><span class='line'>       String result = "";
</span><span class='line'>       String str = data.toLowerCase();
</span><span class='line'>       String temp= sb.toString();
</span><span class='line'>     //处理输出
</span><span class='line'>       for (int i = 0; i &lt; str.length(); i++) {
</span><span class='line'>        int index= p.indexOf(str.substring(i, i+1));//找到字符出现的位置
</span><span class='line'>        if (Character.isLowerCase(data.charAt(i))) {// 小写字母
</span><span class='line'>            result+= Character.toLowerCase(temp.charAt(index)) ;
</span><span class='line'>        }else if(Character.isUpperCase(data.charAt(i))){// 大写字母
</span><span class='line'>            result+= Character.toUpperCase(temp.charAt(index)) ;
</span><span class='line'>        }else // 处理非字母的
</span><span class='line'>            result+=data.charAt(i);
</span><span class='line'>       }
</span><span class='line'>       return result;
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
