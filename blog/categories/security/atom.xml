<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Security | Blog Like a Hacker]]></title>
  <link href="http://zhanheng.github.io/blog/categories/security/atom.xml" rel="self"/>
  <link href="http://zhanheng.github.io/"/>
  <updated>2016-05-18T23:36:41+08:00</updated>
  <id>http://zhanheng.github.io/</id>
  <author>
    <name><![CDATA[ZhanHeng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[防止XSS攻击]]></title>
    <link href="http://zhanheng.github.io/blog/2016/05/14/XssSQLSecurity/"/>
    <updated>2016-05-14T23:10:30+08:00</updated>
    <id>http://zhanheng.github.io/blog/2016/05/14/XssSQLSecurity</id>
    <content type="html"><![CDATA[<p>在开发项目的过程中，网站的安全问题不能被忽视，其中Xss跨脚本攻击很常见。下面就XSS攻击做一下基本介绍，同时给出了我自己的解决办法。</p>

<h5>XSS又称CSS，全称Cross Site Script，跨站脚本攻击，是Web程序中常见的漏洞，XSS属于被动式且用于客户端的攻击方式，所以容易被忽略其危害性。其原理是攻击者向有XSS漏洞的网站中输入(传入)恶意的HTML代码，当其它用户浏览该网站时，这段HTML代码会自动执行，从而达到攻击的目的。如，盗取用户Cookie、破坏页面结构、重定向到其它网站等。</h5>

<p>举个简单的例子：页面名字叫test.jsp：
<code>
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;XSS测试&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
页面内容：&lt;%=request.getParameter("content")%&gt;
&lt;/body&gt;
&lt;/html&gt;
</code>
请求下面链接就会出现问题了：
<code>http://www.domain.com/test.jsp?content=&lt;script&gt;alert(' XSS注入' ); &lt;/script&gt;</code>
为了防止在请求链接中插入恶意的代码，我采用了以下方法：
首先自定义一个Filter 取名XssFilter, 在Web.xml中配置如下：
```
     <filter>
        <filter-name>XssFilter</filter-name>
        <filter-class>test.XssFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>XssFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping></p>

<pre><code>第二步，自定义一个类继承HttpServletRequestWrapper类，并重写父类的方法。
其中包括getParameter() ， getHeader() ,getParameterValues()
其中最重要的是自定义一个过滤特殊字符的方法。


具体实现代码如下：
</code></pre>

<p>import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;</p>

<p>public class XssHttpServletRequestWapper extends HttpServletRequestWrapper {</p>

<pre><code>public XssHttpServletRequestWapper(HttpServletRequest request) {
    super(request);
}

@Override
public String getParameter(String name) {
    return clearXss(super.getParameter(name));
}

@Override
public String getHeader(String name) {
    return clearXss(super.getHeader(name));
}

@Override
public String[] getParameterValues(String name) {
    String[] values = super.getParameterValues(name);
    String[] newValues = new String[values.length];
    for (int i = 0; i &lt; values.length; i++) {
        newValues[i] = clearXss(values[i]);
    }
    return newValues;
}
/**
 *  处理 字符转义 
 *  &gt; &lt; ( ) '  javascript: 
 */
private String clearXss(String value){
    if (value==null || "".equals(value)) {
        return value;
    }
    value = value.replaceAll("&lt;", "&amp;lt").replaceAll("&gt;", "&amp;gt");
    value = value.replaceAll("(", "&amp;#40").replaceAll("\\)", "&amp;#41");
    value = value.replaceAll("'", "&amp;#39");
    value = value.replaceAll("eval\\((.*)\\)", "");
    value = value.replaceAll("[\\\"\\\'][\\s]*javascript:(.*)[\\\"\\\']", "\"\"");
    value = value.replaceAll("script", "");
    return value;
}
</code></pre>

<p>}</p>

<pre><code>
最后一步，在自定义的Filter中引用上述方法，执行过滤操作。
</code></pre>

<p>import java.io.IOException;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;</p>

<p>public class XssFilter implements Filter {
    public void doFilter(ServletRequest request, ServletResponse response,
            FilterChain chain) throws IOException, ServletException {
        XssHttpServletRequestWapper xssRequest = new XssHttpServletRequestWapper((HttpServletRequest) request);
        chain.doFilter(xssRequest, response);
    }
    public void init(FilterConfig filterConfig) throws ServletException {</p>

<pre><code>}

public void destroy() {

}
</code></pre>

<p>}</p>

<p>```</p>

<p>以上是我整个解决的思路和方法，比较容易能想到，能防止大部分的Xss攻击，一些具体的要求还得大家在开发过程中去留意和总结。</p>

<blockquote><p><a href="http://www.2cto.com/Article/201312/264747.html">http://www.2cto.com/Article/201312/264747.html</a></p>

<p><a href="http://hc24.iteye.com/blog/1995213">http://hc24.iteye.com/blog/1995213</a></p></blockquote>
]]></content>
  </entry>
  
</feed>
