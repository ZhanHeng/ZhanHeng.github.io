<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web | Ranger]]></title>
  <link href="http://zhanheng.github.io/blog/categories/web/atom.xml" rel="self"/>
  <link href="http://zhanheng.github.io/"/>
  <updated>2016-07-11T00:22:33+08:00</updated>
  <id>http://zhanheng.github.io/</id>
  <author>
    <name><![CDATA[Zhan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tomcat 虚拟目录配置]]></title>
    <link href="http://zhanheng.github.io/blog/2016/05/24/Tomcat/"/>
    <updated>2016-05-24T13:10:30+08:00</updated>
    <id>http://zhanheng.github.io/blog/2016/05/24/Tomcat</id>
    <content type="html"><![CDATA[<p>Tomcat 是开发过程中经常用到的容器，它是免费的基于 JAVA 的开源 Web 应用服务器。由于它拥有先进的技术、稳定的性能以及良好的扩展性，深受 JAVA 开发者的喜爱以及得到众多软件开发商的认可，成为目前比较流行的 Web 应用服务器。 今天将学习到的Tomcat 虚拟目录配置进行了整理。</p>

<h4>例如：<a href="http://www.xyz.com/course/1024.html">http://www.xyz.com/course/1024.html</a></h4>

<h5>1.Tomcat的基准目录、根目录 。</h5>

<p>上述URL中www.xyz.com表示：WEB服务器的地址(名称)，后边的‘/’代表站点根目录</p>

<p>Tomcat的默认根目录是：apache-tomcat-8.0.24\webapps\ROOT
其中webapps是Tomcat的默认基准目录，Tomcat启动时会加载基准目录下的所有web应用.</p>

<p>修改基准目录的方法：</p>

<h5>方法一：通过修改conf文件夹下的server.xml文件的的Host节点在的appbase属性即可。</h5>

<blockquote><p><code>&lt;Host name="localhost" appBase="webapps" unpackWARs="true" autoDeploy="true"&gt;&lt;/Host&gt;</code></p></blockquote>

<h5>方法二：使用server.xml文件中的<Context>元素（不建议）</h5>

<blockquote><p><code>&lt;Context docBase="E:\myapp" path="" autoDeploy="true"&gt;</code></p></blockquote>

<h5>方法三：在<catalina_home>/conf/Catalina/localhost/下增加ROOT.xml文件（推荐）</h5>

<blockquote><p><code>&lt;Context docBase="E:\myapp" path="" autoDeploy="true"&gt;</code></p></blockquote>

<h5>2.虚拟子目录。</h5>

<p>物理目录：实际存放在主目录(根目录)的子文件夹</p>

<p>虚拟子目录：URL地址中不存在于主目录(根目录)下的子文件夹</p>

<p>上述URL中的course就是一个虚拟子目录。</p>

<p>下面介绍 修改虚拟子目录的方法：</p>

<h5>方法一：通过修改conf文件夹下的server.xml文件的的<Context>元素在的path属性即可,默认是空的。（不建议）</h5>

<blockquote><p><code>&lt;Context docBase="E:\myapp" path="/myweb" autoDeploy="true"&gt;</code></p></blockquote>

<h5>方法二：在<catalina_home>/conf/Catalina/localhost/下增加xml文件,增加<Context>元素这种方法path属性中的值不再起作用，xml文件名就是虚拟子目录的名称</h5>

<p>先在E盘建一个mycourse文件夹并新建个test.html文件，在<catalina_home>/conf/Catalina/localhost/下增加course.xml文件,增加<Context>元素，最后访问localhost:8080/course/test.html即可。</p>

<p>如果有多级子目录，文件名中的‘/’改用‘#’代替,例如myapp#course.xml,最后访问localhost:8080/myapp/course/test.html即可。</p>

<blockquote><p><code>&lt;Context docBase="E:\mycourse" path="" autoDeploy="true"&gt;</code></p></blockquote>

<h5>方法三：在基准目录下直接放文件夹（通俗易懂）</h5>

<h5>方法四：在基准目录下直接放WAR文件</h5>

<p> 由于 有 unpackWARs=&ldquo;true&rdquo; autoDeploy=&ldquo;true&rdquo; 这两个属性。自动解压并且部署</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java数据库连接池之 HikariCP]]></title>
    <link href="http://zhanheng.github.io/blog/2016/05/20/DataBasePool/"/>
    <updated>2016-05-20T23:10:30+08:00</updated>
    <id>http://zhanheng.github.io/blog/2016/05/20/DataBasePool</id>
    <content type="html"><![CDATA[<p>在web项目开发过程中，数据的持久化是个老生常谈的话题，如何高效的与数据库建立连接就是我们需要解决的问题。</p>

<h5>连接池技术的核心思想：连接复用，通过建立一个数据库连接池以及一套连接使用、分配、管理策略，使得该连接池中的连接可以得到高效、安全的复用，避免了数据库连接频繁建立、关闭的开销。</h5>

<h4>连接池的组成部分：连接池的建立、连接池的管理、连接池的关闭。</h4>

<p>自己维护一些数据库连接，需要使用的时候直接使用其中一个连接，用完之后不是关闭而是将他归还，等待其他操作使用。</p>

<p>proxool、DBCP、C3P0最为常见的三种JDBC连接池技术。</p>

<p>proxool是一种Java数据库连接池技术。sourceforge下的一个开源项目,这个项目提供一个健壮、易用的连接池，最为关键的是这个连接池提供监控的功能，方便易用，便于发现连接泄漏的情况。</p>

<p>单例模式（Singleton）简单的说就是类在系统中只能被实例化一次，外界只有唯一一个类实例可以使用。</p>

<pre><code>public class Singleton {  
    private static class LazyLoadSingleton{  
        private static final Singleton singleton = new Singleton();  
    }   
    private Singleton() {} 
      public static Singleton getSingleton(){  
        return LazyLoadSingleton.singleton;  
    }  
} 
</code></pre>

<p>但是今天在这里介绍一个重量级的数据库连接池HiKariCP,它是数据库连接池的一个后起之秀，号称性能最好，可以完美地PK掉其他连接池。可能你会问 ：什么？为何要使用HiKariCP？不是有C3P0/DBCP这些成熟的数据库连接池吗？</p>

<p>这要先从BoneCP说起：一直用的好好的，为什么又搞出一个BoneCP来？因为，传说中BoneCP在快速这个特点上做到了极致，官方数据是C3P0等的25倍左右。看数据对比图：
<img src="http://img.blog.csdn.net/20150717155314196?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="image" /></p>

<p>但是……什么？又来一个CP？……什么是Hikari？
Hikari来自日文，是“光”（阳光的光，不是光秃秃的光）的意思。作者估计是为了借助这个词来暗示这个CP速度飞快。不知作者是不是日本人，不过日本也有很多优秀的码农，听说比特币据说日本人搞出来的。。。</p>

<p>这个产品的口号是“快速、简单、可靠”。实际情况跟这个口号真的匹配吗？又是有图有真相
<img src="http://img.blog.csdn.net/20150717155421650?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="image" /></p>

<p>这个图，也间接地、再一次地证明了boneCP比c3p0强大很多，当然，跟“光”比起来，又弱了不少啊。</p>

<p>那么，这么好的P是怎么做到的呢？官网详细地说明了HikariCP所做的一些优化，总结如下：
字节码精简：优化代码，直到编译后的字节码最少，这样，CPU缓存可以加载更多的程序代码；
优化代理和拦截器：减少代码，例如HikariCP的Statement proxy只有100行代码，只有BoneCP的十分之一；
自定义数组类型（FastStatementList）代替ArrayList：避免每次get()调用都要进行range check，避免调用remove()时的从头到尾的扫描；
自定义集合类型（ConcurrentBag）：提高并发读写的效率；
其他针对BoneCP缺陷的优化，比如对于耗时超过一个CPU时间片的方法调用的研究（但没说具体怎么优化）。
很多优化的对比都是针对BoneCP的。</p>

<p>几个连接池的代码量对比（代码量越少，一般意味着执行效率越高、发生bug的可能性越低）：</p>

<p><img src="http://img.blog.csdn.net/20150717155444740?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="image" /></p>

<p>第三方关于速度的测试：</p>

<p><img src="http://img.blog.csdn.net/20150717155541525?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="image" /></p>

<p>也许你会说，速度高，如果不稳定也是硬伤啊。于是，关于稳定性的图也来了:
<img src="http://img.blog.csdn.net/20150717155601214?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="image" /></p>

<p>另外，关于可靠性方面，也是有实验和数据支持的。对于数据库连接中断的情况，通过测试getConnection()，各种CP的不相同处理方法如下：
（所有CP都配置了跟connectionTimeout类似的参数为5秒钟）
<strong>HikariCP</strong>：等待5秒钟后，如果连接还是没有恢复，则抛出一个SQLExceptions 异常；后续的getConnection()也是一样处理；</p>

<p><strong>C3P0</strong>：完全没有反应，没有提示，也不会在“CheckoutTimeout”配置的时长超时后有任何通知给调用者；然后等待2分钟后终于醒来了，返回一个error；</p>

<p><strong>Tomcat</strong>：返回一个connection，然后……调用者如果利用这个无效的connection执行SQL语句……结果可想而知；大约55秒之后终于醒来了，这时候的getConnection()终于可以返回一个error，但没有等待参数配置的5秒钟，而是立即返回error；</p>

<p><strong>BoneCP</strong>：跟Tomcat的处理方法一样；也是大约55秒之后才醒来，有了正常的反应，并且终于会等待5秒钟之后返回error了；</p>

<p>可见，HikariCP的处理方式是最合理的。根据这个测试结果，对于各个CP处理数据库中断的情况，评分如下：</p>

<p><img src="http://img.blog.csdn.net/20150717155628899?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="image" /></p>

<p>下面来看看HiKariCP的数据源配置，如果之前用的是BoneCP配置的数据源，那么，就简单了，只需要把dataSource换一下，稍微调整一下参数就行了：
```</p>

<!-- Hikari Datasource -->


<p> <bean id="dataSourceHikari" class="com.zaxxer.hikari.HikariDataSource"  destroy-method="shutdown">
  <!-- <property name="driverClassName" value="${db.driverClass}" /> &ndash;> <!-- 无需指定，除非系统无法自动识别 -->
  <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=UTF-8" />
  <property name="username" value="${db.username}" />
  <property name="password" value="${db.password}" />
   <!-- 连接只读数据库时配置为true， 保证安全 -->
  <property name="readOnly" value="false" />
  <!-- 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒 -->
  <property name="connectionTimeout" value="30000" />
  <!-- 一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟 -->
  <property name="idleTimeout" value="600000" />
  <!-- 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒，参考MySQL wait_timeout参数（show variables like '%timeout%';） -->
  <property name="maxLifetime" value="1800000" />
  <!-- 连接池中允许的最大连接数。缺省值：10；推荐的公式：((core_count * 2) + effective_spindle_count) -->
  <property name="maximumPoolSize" value="15" />
 </bean>
```</p>

<p>其中，很多配置都使用缺省值就行了，除了maxLifetime和maximumPoolSize要注意自己计算一下。
其他的配置（sqlSessionFactory、MyBatis MapperScannerConfigurer、transactionManager等）统统不用变。</p>

<p>其他关于Datasource配置参数的建议：
Configure your HikariCP idleTimeout and maxLifeTime settings to be one minute less than the wait_timeout of MySQL.
对于有Java连接池的系统，建议MySQL的wait_timeout使用缺省的8小时（<a href="http://www.rackspace.com/knowledge_center/article/how-to-change-the-mysql-timeout-on-a-server%EF%BC%89%E3%80%82">http://www.rackspace.com/knowledge_center/article/how-to-change-the-mysql-timeout-on-a-server%EF%BC%89%E3%80%82</a></p>

<p>另外：对于web项目，记得要配置：destroy-method=&ldquo;shutdown&rdquo;</p>

<blockquote><p><a href="https://github.com/brettwooldridge/HikariCP/wiki/Down-the-Rabbit-Hole">https://github.com/brettwooldridge/HikariCP/wiki/Down-the-Rabbit-Hole</a></p>

<p><a href="http://www.bubuko.com/infodetail-978464.html">http://www.bubuko.com/infodetail-978464.html</a></p>

<p><a href="https://github.com/brettwooldridge/HikariCP/wiki/Bad-Behavior:-Handling-Database-Down">https://github.com/brettwooldridge/HikariCP/wiki/Bad-Behavior:-Handling-Database-Down</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[防止XSS攻击]]></title>
    <link href="http://zhanheng.github.io/blog/2016/05/16/XssSQLSecurity/"/>
    <updated>2016-05-16T10:15:30+08:00</updated>
    <id>http://zhanheng.github.io/blog/2016/05/16/XssSQLSecurity</id>
    <content type="html"><![CDATA[<p>在开发项目的过程中，网站的安全问题不能被忽视，其中Xss跨脚本攻击很常见。下面就XSS攻击做一下基本介绍，同时给出了我自己的解决办法。</p>

<h5>XSS又称CSS，全称Cross Site Script，跨站脚本攻击，是Web程序中常见的漏洞，XSS属于被动式且用于客户端的攻击方式，所以容易被忽略其危害性。其原理是攻击者向有XSS漏洞的网站中输入(传入)恶意的HTML代码，当其它用户浏览该网站时，这段HTML代码会自动执行，从而达到攻击的目的。如，盗取用户Cookie、破坏页面结构、重定向到其它网站等。</h5>

<p>举个简单的例子：页面名字叫test.jsp：
<code>
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;XSS测试&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
页面内容：&lt;%=request.getParameter("content")%&gt;
&lt;/body&gt;
&lt;/html&gt;
</code>
请求下面链接就会出现问题了：
<code>http://www.domain.com/test.jsp?content=&lt;script&gt;alert(' XSS注入' ); &lt;/script&gt;</code>
为了防止在请求链接中插入恶意的代码，我采用了以下方法：
首先自定义一个Filter 取名XssFilter, 在Web.xml中配置如下：
```
     <filter>
        <filter-name>XssFilter</filter-name>
        <filter-class>test.XssFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>XssFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping></p>

<pre><code>第二步，自定义一个类继承HttpServletRequestWrapper类，并重写父类的方法。
其中包括getParameter() ， getHeader() ,getParameterValues()
其中最重要的是自定义一个过滤特殊字符的方法。


具体实现代码如下：
</code></pre>

<p>import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;</p>

<p>public class XssHttpServletRequestWapper extends HttpServletRequestWrapper {</p>

<pre><code>public XssHttpServletRequestWapper(HttpServletRequest request) {
    super(request);
}

@Override
public String getParameter(String name) {
    return clearXss(super.getParameter(name));
}

@Override
public String getHeader(String name) {
    return clearXss(super.getHeader(name));
}

@Override
public String[] getParameterValues(String name) {
    String[] values = super.getParameterValues(name);
    String[] newValues = new String[values.length];
    for (int i = 0; i &lt; values.length; i++) {
        newValues[i] = clearXss(values[i]);
    }
    return newValues;
}
/**
 *  处理 字符转义 
 *  &gt; &lt; ( ) '  javascript: 
 */
private String clearXss(String value){
    if (value==null || "".equals(value)) {
        return value;
    }
    value = value.replaceAll("&lt;", "&amp;lt").replaceAll("&gt;", "&amp;gt");
    value = value.replaceAll("(", "&amp;#40").replaceAll("\\)", "&amp;#41");
    value = value.replaceAll("'", "&amp;#39");
    value = value.replaceAll("eval\\((.*)\\)", "");
    value = value.replaceAll("[\\\"\\\'][\\s]*javascript:(.*)[\\\"\\\']", "\"\"");
    value = value.replaceAll("script", "");
    return value;
}
</code></pre>

<p>}</p>

<pre><code>
最后一步，在自定义的Filter中引用上述方法，执行过滤操作。
</code></pre>

<p>import java.io.IOException;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;</p>

<p>public class XssFilter implements Filter {
    public void doFilter(ServletRequest request, ServletResponse response,
            FilterChain chain) throws IOException, ServletException {
        XssHttpServletRequestWapper xssRequest = new XssHttpServletRequestWapper((HttpServletRequest) request);
        chain.doFilter(xssRequest, response);
    }
    public void init(FilterConfig filterConfig) throws ServletException {</p>

<pre><code>}

public void destroy() {

}
</code></pre>

<p>}</p>

<p>```</p>

<p>以上是我整个解决的思路和方法，比较容易能想到，能防止大部分的Xss攻击，一些具体的要求还得大家在开发过程中去留意和总结。</p>

<blockquote><p><a href="http://www.2cto.com/Article/201312/264747.html">http://www.2cto.com/Article/201312/264747.html</a></p>

<p><a href="http://hc24.iteye.com/blog/1995213">http://hc24.iteye.com/blog/1995213</a></p></blockquote>
]]></content>
  </entry>
  
</feed>
